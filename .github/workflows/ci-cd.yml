name: ci-cd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  static-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x  # Specify the Python version you want to use

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy check-manifest

      - name: Lint Code (ruff)
        if: true
        run: ruff check .

      - name: Format Code (black)
        if: true
        run: black --check --diff .

      - name: Type Check (mypy)
        if: true
        run: mypy src tests

      - name: Check Manifest (check-manifest)
        if: true
        run: check-manifest

      - name: Use Codecov to track coverage
        if: true
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml   # coverage report

  pytest:
    if: success() || failure()
    needs: static-checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]  # Add the Python versions you want to test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pytest

      - name: Run Tests and Calculate Coverage
        run: pytest

  deploy:
    needs: [static-checks, pytest]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Get the release tag version
      id: vars
      run: |
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Update pyproject.toml
      run: |
        # Extract the tag version
        TAG_VERSION=${{ steps.vars.outputs.tag }}
        echo $TAG_VERSION
        # Update pyproject.toml with the new version
        sed -i "s/version = .*/version = \"$TAG_VERSION\"/g" pyproject.toml

    - name: Build
      run: |
        python -m build

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          pycounts

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}